<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:mx="library://ns.adobe.com/flex/mx"
					   creationComplete="initApp(event)"
					   showStatusBar="false">
	<fx:Style source="SharedObjectReader.css"/>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:XMLList id="fileData">			
			<fold name="#SharedObject"/>					
		</fx:XMLList>
	</fx:Declarations>
	
	<mx:HBox horizontalGap="5" width="100%" height="100%" fontSize="18" fontFamily="Monaco">
		<mx:Tree id="fileSystem" width="305" height="100%" 
			dataProvider="{fileData}" labelField="@name"
				 horizontalScrollPolicy="on" change="selectChangeHandler(event)" />		
		<s:TextArea id="output" width="100%" height="100%" fontSize="15" color="0x0000FF" 
					editable="false" lineHeight="23" verticalScrollPolicy="on"/>
	</mx:HBox>
	
	<fx:Script>
		<![CDATA[
			import code.Folder;
			import code.FolderConfig;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
		
		private var _swfSOFolder:File = null;
		private var _appSOFolder:File = null;
		
		private var _deleteFile:File = null;
		
		private function initApp(e:Event):void
		{			
			var config:FolderConfig = new FolderConfig();
			
			_appSOFolder = new File(config.appSOFolder);			
			_swfSOFolder = new File(config.swfSOFolder);			
			
			refresh();
			
			var so:SharedObject = SharedObject.getLocal("init_so");
			
			var app:NativeApplication = NativeApplication.nativeApplication;
			
			so.data.app = app.applicationID;
			so.data.msg = "Hello World!";
			so.data.author = "larryhou";
			so.flush();	
			
			addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
		}
			
		private function cleanUp():void
		{
			var root:File = File.applicationStorageDirectory;
			
			var item:File;
			var list:Array = root.getDirectoryListing();
			while (list.length)
			{
				item = list.pop();
				if (item.isDirectory)
				{
					item.deleteDirectory(true);
				}
				else
				{
					item.deleteFile();
				}
			}
		}
		
		/**
		 * 键盘事件
		 * @param	event
		 */
		override protected function keyUpHandler(event:KeyboardEvent):void 
		{		
			super.keyUpHandler(event);
			
			switch(event.keyCode)
			{
				case Keyboard.F5:
				{
					refresh();
					break;
				}
				
				case Keyboard.DELETE:
				{
					deleteFile();
					break;
				}
			}
		}
		
		/**
		 * 删除文件
		 */
		private function deleteFile():void
		{
			if (fileSystem.selectedItem == null) return;
			
			var file:File = new File(fileSystem.selectedItem.@url);
			if (file.exists == false) return;
			
			_deleteFile = file;
			
			var type:String = "文件";			
			var isFold:Boolean = (file.extension == null);
			isFold ||= (file.extension.toLowerCase() != "sol");
			
			if (isFold)
			{
				type = "目录";
			}
			
			var buttonFlags:int = Alert.OK | Alert.CANCEL;
			var msg:String = "点击”确定“将会删除" + type +"<" + file.nativePath + ">，";
			if (isFold) msg += "删除目录将会导致目录该目录里面的所有文件也会被删除！";
			msg += "点击”取消“则保留这个" + type + "。";
			
			Alert.show(msg, "删除" + type, buttonFlags, null, closeAlertHandler);
		}
		
		/**
		 * 关闭对话框
		 * @param	e
		 */
		private function closeAlertHandler(e:CloseEvent):void
		{
			if (e.detail == Alert.OK && _deleteFile.exists)
			{
				_deleteFile.addEventListener(Event.COMPLETE, deleteCompleteHandler);
				_deleteFile.addEventListener(IOErrorEvent.IO_ERROR, deleteErrorHandler);
				
				if(_deleteFile.isDirectory)
				{
					_deleteFile.deleteDirectory(true);
				}
				else
				{
					_deleteFile.deleteFile();
				}
			}
		}
		
		/**
		 * 删除文件出错
		 * @param	e
		 */
		private function deleteErrorHandler(e:IOErrorEvent):void 
		{
			e.currentTarget.removeEventListener(e.type, arguments.callee);
			
			var msg:String = "删除文件失败！\n";
			msg += e.text + "\n";
			
			msg += "您可以尝试手动删除！文件所在目录为：\n";
			var file:File = new File(fileSystem.selectedItem.@url);
			msg += file.parent.nativePath;
			
			Alert.show(msg, "警告消息");
		}
		
		/**
		 * 删除文件成功
		 * @param	e
		 */
		private function deleteCompleteHandler(e:Event):void 
		{
			e.currentTarget.removeEventListener(e.type,arguments.callee);
			
			refresh();
			
			Alert.show("删除成功！目录显示已经刷新。","系统消息");
		}
		
		/**
		 * 显示删除文件
		 */
		private function showDeleteFile():void
		{
			output.text = "delete file \n";
			
			if (fileSystem.selectedItem == null)
			{
				output.text = "您没有选中文件！";
				return;
			}	
			
			var file:File = new File(fileSystem.selectedItem.@url);
			if (file.exists == false)
			{
				output.text = file.nativePath + " 不存在！";
				return;
			}
			
			var msg:String = "本工具不能直接删除您的SO缓存文件，如需删除请手动操作，SO文件所在目录为：\n";
			msg += file.parent.nativePath;
			
			output.text = msg;
		}
		
		/**
		 * 重新生成目录树
		 */
		private function refresh():void
		{
			output.text = File.applicationStorageDirectory.nativePath;
			
			delete fileData.fold;
			
			var list:Array = _swfSOFolder.getDirectoryListing();
			var fold:Folder = null;
			for each(var file:File in list)
			{				
				fold = new Folder(file.url, file.name);
				fileData.appendChild(fold.nodeXML);
			}
			
			cleanUp();
		}
		
		/**
		 * 目录树选择发生改变
		 * @param	e
		 */
		private function selectChangeHandler(e:Event):void
		{		
			output.text = "";
			
			var foldKey:String = fileSystem.selectedItem.@isfold;
			if (foldKey == "" || foldKey.toLowerCase() == "true") return;			
			
			var file:File = new File(fileSystem.selectedItem.@url);
			
			file.addEventListener(Event.COMPLETE, copyCompleteHandler);
			file.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
			file.copyToAsync(_appSOFolder.resolvePath(file.name), true);
		}
		
		/**
		 * 拷贝完成
		 * @param	e
		 */
		private function copyCompleteHandler(e:Event):void 
		{		
			var file:File = e.currentTarget as File;
			
			var cacheName:String = file.name.replace(/\.sol$/i, "");			
			output.text = "#" + file.name + "#";
			
			var so:SharedObject = SharedObject.getLocal(cacheName);
			
			output.appendText(stringfy(so.data, "  "));
		}
		
		/**
		 * 拷贝出错
		 * @param	e
		 */
		private function errorHandler(e:IOErrorEvent):void 
		{
			output.text = e.toString();
		}
		
		/**
		 * 打印对象
		 * @param	target
		 */
		private function stringfy(target:Object, indent:String = ""):String
		{
			if (target == null) return "null";
			
			var output:String;
			var list:Array = [];
			if (typeof target == "object")
			{
				var item:String;
				for (var key:String in target)
				{
					item = indent + key + ":";
					if (typeof target[key] == "object")
					{
						item += "[" + getQualifiedClassName(target[key]) + "]";
					}
					
					list.push( item += stringfy(target[key], indent + "    "));
				}
				
				output = list.length? "\n" : "";
				output += list.join("\n");
			}
			else
			{
				
				if (target is String) 
				{
					output = "\"" + target + "\"";
				}
				else
				{
					output = String(target);
				}
			}
			
			return output;
		}	
		
		]]>
	</fx:Script>
	
</s:WindowedApplication>